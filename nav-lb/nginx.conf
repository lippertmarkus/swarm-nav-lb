daemon off;
worker_processes 1;
error_log stderr info;
error_log logs/error.log info;

events {
    worker_connections 1024;
}

env DNS_SERVER;
env UP_HOSTNAME;

http {
    # global dns cache
    lua_shared_dict dns_cache_http 1m;

    # create a global master which caches DNS answers according to TTL
    init_by_lua_block {
        local dns_cache_key = "dns_cache_http"
        local dns_server = os.getenv("DNS_SERVER")
        local hostname = os.getenv("UP_HOSTNAME")
        local ttl = 10

        lb = require("load_balancer.helper"):new(dns_cache_key, hostname, dns_server, ttl)
    }

    # create a per-worker client that periodically syncs from the master cache (according to TTL values)
    init_worker_by_lua_block {
        lb:init_worker()
    } 

    upstream up_webclient {
        server 127.0.0.1:80 down; # dummy

        # cookie-based
        balancer_by_lua_block { 
            return lb:lb_cookie(80)
        }
        keepalive 16;
    }
    
    upstream up_web_http {
        server 127.0.0.1:80 down; # dummy

        # round-robin
        balancer_by_lua_block { 
            return lb:lb_rr(8080)
        }
    }

    server {
        listen 8080;
        access_log off;

         location / {
            proxy_pass http://up_web_http;
        }

        location /health {
            return 200 'OK';
            add_header Content-Type text/plain;
        }
    }

    server {
        listen 80;

        location / {
            proxy_pass http://up_webclient;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }
}

stream {
    # global dns cache
    lua_shared_dict dns_cache 1m;

    # create a global master which caches DNS answers according to TTL
    init_by_lua_block {
        local dns_cache_key = "dns_cache"
        local dns_server = os.getenv("DNS_SERVER")
        local hostname = os.getenv("UP_HOSTNAME")
        local ttl = 10

        lb = require("load_balancer.helper"):new(dns_cache_key, hostname, dns_server, ttl)
    }

    # create a per-worker client that periodically syncs from the master cache (according to TTL values)
    init_worker_by_lua_block {
        lb:init_worker()
    }

    upstream up_nst_client {
        server 127.0.0.1:80 down; # dummy

        # round-robin
        balancer_by_lua_block { 
            return lb:lb_rr(7046)
        }
    } 

    upstream up_nst_soap {
        server 127.0.0.1:80 down; # dummy

        # round-robin
        balancer_by_lua_block {
            return lb:lb_rr(7047)
        }
    }    

    upstream up_nst_odata {
        server 127.0.0.1:80 down; # dummy

        # round-robin
        balancer_by_lua_block {
            return lb:lb_rr(7048)
        }
    }

	server {
		listen     7046;
		proxy_pass up_nst_client;
	}	
	
	server {
		listen     7047;
		proxy_pass up_nst_soap;
	}
	
	server {
		listen     7048;
		proxy_pass up_nst_odata;
	}
}